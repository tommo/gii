# encoding: utf-8

VERSION = '0.0.1'
APPNAME = 'gii-host'

top = '.'
out = '../bin/_build'


def options( opt ):
	opt.load( 'compiler_cxx compiler_c' )
	opt.recurse( [ 'osx', 'python']  )

def configure( conf ):
	conf.load( 'compiler_cxx compiler_c' )
	conf.env.ARCH         = [ 'i386' ]
	conf.env.CXXFLAGS     = [ '-fno-rtti', '-g' ]
	conf.env.LINKFLAGS    = []
	conf.recurse( [ 'osx', 'python']  )

def build( bld ):
	# bld( name = 'moai_include', export_includes = find_moai_includes() )
	targets = [ 'osx', 'python' ]
	bld.recurse( 'extension' )
	# TODO: variant
	setup_moai_env( bld )
	setup_fmod_env( bld )
	
	bld.env.GII_BINARY_PATH = bld.path.parent.abspath() + '/bin'

	for target in targets:
		bld.recurse( target )

# ##----------------------------------------------------------------##
# #helpers
import os
def setup_moai_env( ctx ):
	ctx.env.INCLUDES_MOAI = find_moai_includes()
	# TODO: variant
	LIB_NAMES  = [ 'moai-%s', 'moai-%s-3rdparty', 'moai-%s-luaext', 'moai-%s-zlcore' ]
	LIB_NAMES += [ 'moai-%s-fmod-ex', 'moai-%s-fmod-designer' ]

	target = 'osx'
	config = 'debug'
	ctx.env.LIBPATH_MOAI  = [ '/Users/tommo/prj/moai/lib/%s-%s' % ( config, target ) ]
	ctx.env.LIB_MOAI      = [ n % target for n in LIB_NAMES ]

def find_moai_includes():
	MOAI_ROOT =  os.environ.get( 'MOAI_ROOT', '/Users/tommo/dev/moai-dev' )
	
	moaiSources   = [
		MOAI_ROOT + '/src',
		MOAI_ROOT + '/src/moaicore',
		MOAI_ROOT + '/src/config-default'
	]

	MOAI_THRIDPARTY_PATH = MOAI_ROOT + '/3rdparty'
	thirdParties = [
		MOAI_THRIDPARTY_PATH,
		MOAI_THRIDPARTY_PATH + '/chipmunk-5.3.4/include',
		MOAI_THRIDPARTY_PATH + '/box2d-2.2.1',
		MOAI_THRIDPARTY_PATH + '/freetype-2.4.4/include',
		MOAI_THRIDPARTY_PATH + '/tinyxml',
		MOAI_THRIDPARTY_PATH + '/lua-5.1.3/src',
		MOAI_THRIDPARTY_PATH + '/jansson-2.1/src',
		MOAI_THRIDPARTY_PATH + '/sfmt-1.4',
	]

	commons = [ '.' ]
	return commons + moaiSources + thirdParties

def setup_fmod_env( ctx ):
	#TODO
	ctx.env.LIBPATH_FMOD  = [ '/Users/tommo/dev/fmod/osx/api/lib' ]
	ctx.env.LIBPATH_FMOD += [ '/Users/tommo/dev/fmod/osx/fmoddesignerapi/api/lib/' ]
	ctx.env.LIB_FMOD      = [ 'fmodex', 'fmodevent', 'fmodeventnet' ]

##----------------------------------------------------------------##
##extension
from waflib import TaskGen, Task

@TaskGen.extension('.mm')
def mm_hook(self, node):
	"Bind the c++ file extensions to the creation of a :py:class:`waflib.Tools.cxx.cxx` instance"
	return self.create_compiled_task('mm', node)
 
class mm(Task.Task):
	"Compile MM files into object files"
	run_str = '${CXX} ${ARCH_ST:ARCH} ${MMFLAGS} ${FRAMEWORKPATH_ST:FRAMEWORKPATH} ${CPPPATH_ST:INCPATHS} ${DEFINES_ST:DEFINES} ${CXX_SRC_F}${SRC} ${CXX_TGT_F}${TGT}'
	vars    = ['CXXDEPS'] # unused variable to depend on, just in case
	ext_in  = ['.h'] # set the build order easily by using ext_out=['.h']